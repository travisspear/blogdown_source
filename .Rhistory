geom_point(
data = SimulatedData,
aes(
x = Time,
y = OutcomeScore,
group = GraphId,
fill = DiseaseSeverity,
color = DiseaseSeverity
),
pch = 21,
size = 5,
alpha = .4
) +
# Create severity specific plots of the mean outcomes for each severity category
geom_line(
data = SimulatedData %>%
ungroup() %>%
filter(DiseaseSeverity == "Severe Impairment") %>%
select(Time, OutcomeScore) %>%
group_by(Time) %>%
summarise(Mean = mean(OutcomeScore)),
aes(
x = Time,
y = Mean,
group = 1
),
size = 1
) +
geom_point(
data = SimulatedData %>%
ungroup() %>%
filter(DiseaseSeverity == "Severe Impairment") %>%
select(Time, OutcomeScore) %>%
group_by(Time) %>%
summarise(Mean = mean(OutcomeScore)),
aes(
x = Time,
y = Mean
),
size = 6,
pch = 21,
color = "black",
fill = "#d2233c" # Brighter Red
) +
geom_line(
data = SimulatedData %>%
ungroup() %>%
filter(DiseaseSeverity == "Mild Impairment") %>%
select(Time, OutcomeScore) %>%
group_by(Time) %>%
summarise(Mean = mean(OutcomeScore)),
aes(
x = Time,
y = Mean,
group = 1
),
size = 1
) +
geom_point(
data = SimulatedData %>%
ungroup() %>%
filter(DiseaseSeverity == "Mild Impairment") %>%
select(Time, OutcomeScore) %>%
group_by(Time) %>%
summarise(Mean = mean(OutcomeScore)),
aes(
x = Time,
y = Mean
),
size = 6,
pch = 21,
color = "black",
fill = "#ffe944" # Brigher Yellow
) +
geom_line(
data = SimulatedData %>%
ungroup() %>%
filter(DiseaseSeverity == "No Impairment") %>%
select(Time, OutcomeScore) %>%
group_by(Time) %>%
summarise(Mean = mean(OutcomeScore)),
aes(
x = Time,
y = Mean,
group = 1
),
size = 1
) +
geom_point(
data = SimulatedData %>%
ungroup() %>%
filter(DiseaseSeverity == "No Impairment") %>%
select(Time, OutcomeScore) %>%
group_by(Time) %>%
summarise(Mean = mean(OutcomeScore)),
aes(
x = Time,
y = Mean
),
size = 6,
pch = 21,
color = "black",
fill = "#0a64b7" # Brighter Blue
) +
# Plot the MMSE cutoffs
geom_hline(
yintercept = 17
) +
geom_hline(
yintercept = 24
) +
# Plot a colored rect over each severity category
geom_rect(
fill = "#d33b50",
alpha = .15,
aes(
xmin = "Baseline",
xmax = "End of Trial"
),
ymin = 0,
ymax = 17
) +
geom_rect(
fill = "#fded73",
alpha = .15,
aes(
xmin = "Baseline",
xmax = "End of Trial"
),
ymin = 17,
ymax = 24
) +
geom_rect(
fill = "#2f5597",
alpha = .15,
aes(
xmin = "Baseline",
xmax = "End of Trial"
),
ymin = 24,
ymax = 30
) +
# Tweak colors
scale_x_discrete(limits = c("Baseline", "Mid", "End of Trial")) +
scale_y_continuous(breaks=c(0, 17, 24, 30)) +
scale_fill_manual(values = c("#fded73", # Yellow
"#2E75B6", # Blue
"#d33b50" # Red
)) +
scale_color_manual(values = c("#fded73",
"#2E75B6",
"#d33b50")) +
# Tweak theme and other plot parameters
theme_minimal() +
ggtitle("Alzheimer Disease Progression",
subtitle = "Changes in MMSE Throughout Clinical Trials in All Groups") +
ylab("MMSE Score") +
xlab("Relative Trial Time") +
labs(fill = "Baseline Disease Severity") +
guides(color=F) +
theme(
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
legend.position="bottom",
plot.title = element_text(hjust = .5),
plot.subtitle = element_text(hjust = .5),
# Transparent background
# panel.background = element_rect(fill = "transparent"),
plot.background = element_rect(fill = "transparent", color = NA),
# legend.background = element_rect(fill = "transparent"),
# legend.box.background = element_rect(fill = "transparent")
)
p
p <- ggplot() +
# Background lines for each individual trial
geom_line(
data = SimulatedData,
aes(
x = Time,
y = OutcomeScore,
group = GraphId,
color = DiseaseSeverity
),
alpha = .2
) +
# Background points for each individual trial
geom_point(
data = SimulatedData,
aes(
x = Time,
y = OutcomeScore,
group = GraphId,
fill = DiseaseSeverity,
color = DiseaseSeverity
),
pch = 21,
size = 5,
alpha = .4
) +
# Create severity specific plots of the mean outcomes for each severity category
geom_line(
data = SimulatedData %>%
ungroup() %>%
filter(DiseaseSeverity == "Severe Impairment") %>%
select(Time, OutcomeScore) %>%
group_by(Time) %>%
summarise(Mean = mean(OutcomeScore)),
aes(
x = Time,
y = Mean,
group = 1
),
size = 1
) +
geom_point(
data = SimulatedData %>%
ungroup() %>%
filter(DiseaseSeverity == "Severe Impairment") %>%
select(Time, OutcomeScore) %>%
group_by(Time) %>%
summarise(Mean = mean(OutcomeScore)),
aes(
x = Time,
y = Mean
),
size = 6,
pch = 21,
color = "black",
fill = "#d2233c" # Brighter Red
) +
geom_line(
data = SimulatedData %>%
ungroup() %>%
filter(DiseaseSeverity == "Mild Impairment") %>%
select(Time, OutcomeScore) %>%
group_by(Time) %>%
summarise(Mean = mean(OutcomeScore)),
aes(
x = Time,
y = Mean,
group = 1
),
size = 1
) +
geom_point(
data = SimulatedData %>%
ungroup() %>%
filter(DiseaseSeverity == "Mild Impairment") %>%
select(Time, OutcomeScore) %>%
group_by(Time) %>%
summarise(Mean = mean(OutcomeScore)),
aes(
x = Time,
y = Mean
),
size = 6,
pch = 21,
color = "black",
fill = "#ffe944" # Brigher Yellow
) +
geom_line(
data = SimulatedData %>%
ungroup() %>%
filter(DiseaseSeverity == "No Impairment") %>%
select(Time, OutcomeScore) %>%
group_by(Time) %>%
summarise(Mean = mean(OutcomeScore)),
aes(
x = Time,
y = Mean,
group = 1
),
size = 1
) +
geom_point(
data = SimulatedData %>%
ungroup() %>%
filter(DiseaseSeverity == "No Impairment") %>%
select(Time, OutcomeScore) %>%
group_by(Time) %>%
summarise(Mean = mean(OutcomeScore)),
aes(
x = Time,
y = Mean
),
size = 6,
pch = 21,
color = "black",
fill = "#0a64b7" # Brighter Blue
) +
# Plot the MMSE cutoffs
geom_hline(
yintercept = 17
) +
geom_hline(
yintercept = 24
) +
# Plot a colored rect over each severity category
geom_rect(
fill = "#d33b50",
alpha = .15,
aes(
xmin = "Baseline",
xmax = "End of Trial"
),
ymin = 0,
ymax = 17
) +
geom_rect(
fill = "#fded73",
alpha = .15,
aes(
xmin = "Baseline",
xmax = "End of Trial"
),
ymin = 17,
ymax = 24
) +
geom_rect(
fill = "#2f5597",
alpha = .15,
aes(
xmin = "Baseline",
xmax = "End of Trial"
),
ymin = 24,
ymax = 30
) +
# Tweak colors
scale_x_discrete(limits = c("Baseline", "Mid", "End of Trial")) +
scale_y_continuous(breaks=c(0, 17, 24, 30)) +
scale_fill_manual(values = c("#fded73", # Yellow
"#2E75B6", # Blue
"#d33b50" # Red
)) +
scale_color_manual(values = c("#fded73",
"#2E75B6",
"#d33b50")) +
# Tweak theme and other plot parameters
theme_minimal() +
ggtitle("Alzheimer Disease Progression",
subtitle = "Changes in MMSE Throughout Clinical Trials in All Groups") +
ylab("MMSE Score") +
xlab("Relative Trial Time") +
labs(fill = "Baseline Disease Severity") +
guides(color=F) +
theme(
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
legend.position="bottom",
plot.title = element_text(hjust = .5),
plot.subtitle = element_text(hjust = .5),
# Transparent background
# panel.background = element_rect(fill = "transparent"),
plot.background = element_rect(fill = "#494f5c")
# legend.background = element_rect(fill = "transparent"),
# legend.box.background = element_rect(fill = "transparent")
)
p
blogdown::serve_site()
blogdown::serve_site()
library(tidyverse) # Contains dplyr for general data manipulation and ggplot for plotting (needed later)
simulateData <- function(
nTrials, # How many trials to simulate
avgGroupsPerTrial # How many groups should trials have, on average?
){
x <- lapply(1:nTrials, function(x){ # Iterating over 1:nTrials...
# Generate a number of groups based on a normal distribution with mean = avgGroupsPerTrial
g <- round(abs(rnorm(n = 1, mean = avgGroupsPerTrial-1, sd = 1)), 0)+1
# Create a dataframe with a TrialId, GroupId, and each group having 3 categorical time points
data.frame(
TrialId = x,
lapply(1:g, function(x){
data.frame(
GroupId = x,
list(Time = c("Baseline", "Mid", "End of Trial"))
)
}) %>%
bind_rows()
)
}) %>%
bind_rows()
# Assign groups to be Treatment or Control, but always have at least 1 Treatment Group
xclass <- x %>%
group_by(TrialId) %>%
mutate(
GroupType = ifelse(length(unique(GroupId)) == 1 & GroupId == 1, "Treatment",
ifelse(length(unique(GroupId)) > 1 & GroupId != length(unique(GroupId)), "Treatment",
"Control"))
) %>%
# Add a name of an Outcome Measure (This is the most commonly used outcome for Alzheimer's)
mutate(Outcome = "Mini-Mental State Exam (MMSE)")
# Create a final dataframe with simulated mean group values at each time point
# Assumes that treatment groups generally have higher outcomes post-baseline and control groups (control groups are allowed to decline where the treatment groups are not)
SimulatedData <- xclass %>%
group_by(TrialId, GroupId) %>%
mutate(OutcomeScore = ifelse(Time == "Baseline",  round(rnorm(1, mean = 20, sd = 3), 1), 1)) %>%
mutate(OutcomeScore = ifelse(Time == "End of Trial" & GroupType == "Treatment", (OutcomeScore[Time == "Baseline"]*(abs(rnorm(1, mean = 0, sd = .05))+1)), OutcomeScore)) %>%
mutate(OutcomeScore = ifelse(Time == "Mid" & GroupType == "Treatment", ((OutcomeScore[Time == "End of Trial"] + OutcomeScore[Time == "Baseline"])/2)*rnorm(1, mean = 1, sd = .1), OutcomeScore)) %>%
mutate(OutcomeScore = ifelse(Time == "End of Trial" & GroupType == "Control", (OutcomeScore[Time == "Baseline"]*(rnorm(1, mean = 0, sd = .05)+1)), OutcomeScore)) %>%
mutate(OutcomeScore = ifelse(Time == "Mid" & GroupType == "Control", ((OutcomeScore[Time == "End of Trial"] + OutcomeScore[Time == "Baseline"])/2)*rnorm(1, mean = 1, sd = .1), OutcomeScore)) %>%
mutate(OutcomeScore = round(OutcomeScore, 1)) %>%
# Add a Disease Severity measure based on their baseline MMSE score. Cutoffs here are from a scoring guide and not arbitrary.
mutate(DiseaseSeverity = ifelse(OutcomeScore[Time == "Baseline"] <= 17, "Severe Impairment",
ifelse(OutcomeScore[Time == "Baseline"] > 17 & OutcomeScore[Time == "Baseline"] < 24, "Mild Impairment",
ifelse(OutcomeScore[Time == "Baseline"] >= 24, "No Impairment",
NA)))) %>%
# Remove any impossible scores outside of the range 0-30 in case the randomness assigned any.
mutate(OutcomeScore = ifelse(OutcomeScore > 30, 30,
ifelse(OutcomeScore < 0, 0, OutcomeScore))) %>%
ungroup() %>%
left_join(
xclass %>%
select(TrialId, GroupId, Outcome) %>%
distinct() %>%
rowid_to_column(var = "GraphId")
)
# Return simulated data
return(SimulatedData)
}
SimulatedData <- simulateData(
nTrials = 300,
avgGroupsPerTrial = 3
)
SimulatedData %>%
select(TrialId, GroupId, Time, Score) %>%
head()
View(SimulatedData)
blogdown::build_site()
library(blogodwn)
library(blogdown)
serve_site()
build_site()
serve_site()
build_site()
getwd()
library(blogdown)
blogdown::serve_site()
?new_post
new_post(ext = ".Rmd")
new_post(ext = ".Rmd", title = "Caret for Quick Model Comparison in R")
caret::modelLookup()
caret::modelLookup() %>% nrow
nrow(caret::modelLookup())
getwd()
2+2
train <- read.csv("./data/train.csv", na.strings = c("", " ", NA, NULL))
blogdown::stop_server()
blogdown::serve_site()
blogdown::serve_site()
library(knitr)
library(tidyverse)
library(caret)
#### Removing NA Values
train <- train %>%
# Fix NA Age values
group_by(Pclass, Sex, Embarked) %>%
mutate(
Age = ifelse(is.na(Age), mean(Age, na.rm = T), Age)
) %>%
ungroup %>% # Remove grouping used for mean ages
# Fix NA Embarked values
mutate(
Embarked = ifelse(is.na(Embarked), names(sort(table(train$Embarked), decreasing = T)[1]), Embarked) %>%
as.factor()
) %>%
mutate(Survived = as.factor(Survived)) %>%
select(Pclass, Sex, Age, SibSp, Parch, Fare, Embarked, Survived)
# Recheck NA counts and value types
colSums(is.na(train))
sapply(train, class)
blogdown::serve_site()
saveRDS(file = "titanic.rds")
saveRDS(file = "titanic.rds", object = train)
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
here()
readr::here
blogdown::serve_site()
rm(train)
blogdown::serve_site()
blogdown::build_site()
getwd()
blogdown::serve_site()
library(knitr)
library(kableExtra)
results = data.frame(
ModelType = c("Logistic Regression",
"Decision Tree",
"Gradient Boosting",
"Random Forest",
"Neural Net",
"Ensemble"),
Accuracy = c(conf_logReg$overall["Accuracy"],
conf_dTree$overall["Accuracy"],
conf_GBM$overall["Accuracy"],
conf_RF$overall["Accuracy"],
conf_NNet$overall["Accuracy"],
conf_majority$overall["Accuracy"]),
F1 = c(conf_logReg$byClass["F1"],
conf_dTree$byClass["F1"],
conf_GBM$byClass["F1"],
conf_RF$byClass["F1"],
conf_NNet$byClass["F1"],
conf_majority$byClass["F1"])
) %>%
mutate(
Accuracy = round(Accuracy, 2),
F1 = round(f1, 2)
)
blogdown::build_site()
